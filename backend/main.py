from fastapi import FastAPI, Depends, HTTPException, APIRouter
from sqlalchemy.orm import Session
from backend.config import engine, Base, SessionLocal
from backend import models, schemas, crud, auth
from datetime import timedelta
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from backend.auth import router as auth_router
from fastapi.middleware.cors import CORSMiddleware
from backend.routers import users, events, tickets
from backend.auth import get_current_user
from backend.models import User
from fastapi.middleware.cors import CORSMiddleware
from backend.auth import router as auth_router  
from pydantic import BaseModel
from backend.models import User  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å User –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
from backend.auth import get_current_user  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
import psycopg2
import os
import time
from sqlalchemy import create_engine
from sqlalchemy.exc import OperationalError
# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI()

router = APIRouter()
DATABASE_URL = "postgresql://postgres:1234@db:5432/event_platform"
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

app.include_router(auth_router, prefix="/auth")
# –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç—Ç–æ –Ω–∏–∂–µ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ wait_for_db()
# Base.metadata.create_all(bind=engine)

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app.include_router(auth_router, prefix="/auth")
app.include_router(users.router)
app.include_router(events.router)
print("–ú–∞—Ä—à—Ä—É—Ç /tickets –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
app.include_router(tickets.router)

def wait_for_db():
    retries = 30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ 30
    while retries > 0:
        try:
            engine = create_engine(DATABASE_URL)
            with engine.connect():
                print("‚úÖ Database is ready!")
                return engine  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        except OperationalError:
            print(f"‚è≥ Waiting for database to start... {retries} retries left")
            time.sleep(2)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            retries -= 1
    print("‚ùå Could not connect to the database!")
    exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –ë–î —Ç–∞–∫ –∏ –Ω–µ –ø–æ–¥–Ω—è–ª–∞—Å—å

# –î–æ–∂–∏–¥–∞–µ–º—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
wait_for_db()
# –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –ë–î –≥–æ—Ç–æ–≤–∞, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)
print("‚úÖ Database tables created successfully")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  #  –†–∞–∑—Ä–µ—à–∞–µ–º –í–°–Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# –ú–∞—Ä—à—Ä—É—Ç: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
def read_root():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Event Platform!"}

# ------------- –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò -------------

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.post("/users/", response_model=schemas.UserOut)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = crud.get_user_by_email(db, user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    return crud.create_user(db, user)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@app.get("/users/", response_model=list[schemas.UserOut])
def get_users(db: Session = Depends(get_db)):
    return crud.get_users(db)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
@app.get("/users/{user_id}", response_model=schemas.UserOut)
def get_user(user_id: int, db: Session = Depends(get_db)):
    user = crud.get_user(db, user_id)
    if user is None:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
def get_current_user(db: Session = Depends(get_db), token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        headers={"WWW-Authenticate": "Bearer"},
    )
    payload = auth.decode_access_token(token)
    if payload is None:
        raise credentials_exception
    user = crud.get_user_by_email(db, payload.get("sub"))
    if user is None:
        raise credentials_exception
    return user

#  –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/users/me", response_model=schemas.UserOut)
def read_users_me(current_user: models.User = Depends(get_current_user)):
    return current_user

#  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.put("/users/me", response_model=schemas.UserOut)
def update_user_profile(
    user_update: schemas.UserUpdate, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    return crud.update_user(db, current_user.id, user_update)

# üîπ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.patch("/users/me/password")
def change_password(
    password_data: schemas.PasswordChange, 
    db: Session = Depends(get_db), 
    current_user: models.User = Depends(get_current_user)
):
    success = crud.change_user_password(db, current_user.id, password_data)
    if not success:
        raise HTTPException(status_code=400, detail="–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω")
    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"}

# ------------- –†–ê–ë–û–¢–ê –° –°–û–ë–´–¢–ò–Ø–ú–ò -------------

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@app.post("/events/", response_model=schemas.EventOut)
def create_event(event: schemas.EventCreate, db: Session = Depends(get_db)):
    return crud.create_event(db, event)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
@app.get("/events/", response_model=list[schemas.EventOut])
def get_events(db: Session = Depends(get_db)):
    return crud.get_events(db)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
@app.get("/events/{event_id}", response_model=schemas.EventOut)
def get_event(event_id: int, db: Session = Depends(get_db)):
    event = crud.get_event(db, event_id)
    if event is None:
        raise HTTPException(status_code=404, detail="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return event

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
@app.post("/token", response_model=schemas.Token)
def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    user = crud.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    access_token = auth.create_access_token({"sub": user.email}, expires_delta=timedelta(minutes=30))
    return {"access_token": access_token, "token_type": "bearer"}


# origins = [
#     "http://localhost:4200",  
# ]

from fastapi.middleware.cors import CORSMiddleware




@router.get("/users/me")
def get_current_user_data(current_user: User = Depends(get_current_user)):
    return current_user





class LoginRequest(BaseModel):
    email: str
    password: str

    

@app.post("/login")
def login(request: LoginRequest):
    return {"access_token": "example_token"}

@app.get("/profile", response_model=schemas.UserOut)
def get_profile(current_user: models.User = Depends(get_current_user)):
    return current_user


@app.get("/auth/profile")
def get_profile(current_user: User = Depends(get_current_user)):
    return {
        "id": current_user.id,  # –î–æ–±–∞–≤–ª—è–µ–º ID
        "email": current_user.email,
        "name": current_user.username
    }
 # –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞
conn = psycopg2.connect(
    dbname=os.getenv("DB_NAME", "event_platform"),
    user=os.getenv("DB_USER", "postgres"),
    password=os.getenv("DB_PASSWORD", "1234"),
    host=os.getenv("DB_HOST", "db"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "db" –≤–º–µ—Å—Ç–æ "localhost"
    port=os.getenv("DB_PORT", "5432")
)
cursor = conn.cursor()
class TicketRequest(BaseModel):
    user_id: int
    event_id: int

@app.post("/buy_ticket")
async def buy_ticket(request: TicketRequest, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–æ–≤
    cursor.execute("SELECT available_tickets FROM events WHERE id = %s", (request.event_id,))
    result = cursor.fetchone()

    if not result:
        raise HTTPException(status_code=404, detail="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    available_tickets = result[0]

    if available_tickets <= 0:
        raise HTTPException(status_code=400, detail="–ë–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
    cursor.execute(
        "UPDATE events SET available_tickets = available_tickets - 1 WHERE id = %s",
        (request.event_id,)
    )
    conn.commit()

    # üî• –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Ticket
    new_ticket = models.Ticket(
        user_id=request.user_id,
        event_id=request.event_id,
    )
    db.add(new_ticket)
    db.commit()

    return {"message": f"–ë–∏–ª–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏–µ {request.event_id} –∫—É–ø–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {request.user_id}"}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.get("/reservations/{user_id}", response_model=list[schemas.EventOut])
def get_user_reservations(user_id: int, db: Session = Depends(get_db)):
    tickets = db.query(models.Ticket).filter(models.Ticket.user_id == user_id).all()

    if not tickets:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")

    events = []
    for ticket in tickets:
        event = db.query(models.Event).filter(models.Event.id == ticket.event_id).first()
        if event:
            events.append(event)

    return events


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
